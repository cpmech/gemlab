use super::{ElementKind, Parameter};
use crate::{mesh::CellAttributeId, StrError};
use std::collections::{HashMap, HashSet};

#[derive(Clone, Debug)]
pub(crate) struct ElementAttribute {
    pub(crate) kind: ElementKind,
    pub(crate) active: bool,
    pub(crate) parameters: HashSet<Parameter>,
}

pub struct ElementAttributes {
    attributes: HashMap<CellAttributeId, ElementAttribute>,
}

impl ElementAttribute {
    pub fn new(kind: ElementKind) -> Self {
        ElementAttribute {
            kind,
            active: true,
            parameters: HashSet::new(),
        }
    }
}

impl ElementAttributes {
    pub fn new() -> Self {
        ElementAttributes {
            attributes: HashMap::new(),
        }
    }

    pub fn set(&mut self, attribute_id: CellAttributeId, kind: ElementKind) -> &mut Self {
        self.attributes.insert(attribute_id, attribute);
        self
    }

    pub fn get(&self, attribute_id: CellAttributeId) -> Result<ElementAttribute, StrError> {
        match self.attributes.get(&attribute_id) {
            Some(attribute) => Ok(attribute.clone()),
            None => return Err("cannot find cell with a specific attribute id"),
        }
    }
}
